group 'org.openrndr.dnky.demo'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.3.11'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = 1.8
project.ext.openrndrVersion = "0.3.32-rc1"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url="https://dl.bintray.com/openrndr/openrndr/"
    }
    maven { url 'https://jitpack.io' }
}

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        project.ext.openrndrOS = "windows"
        break
    case org.gradle.internal.os.OperatingSystem.LINUX:
        project.ext.openrndrOS = "linux-x64"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.openrndrOS = "macos"
        break
}

ext.orxVersion = "0.0.17"
ext.dnkyVersion = "0.0.2-SNAPSHOT"
ext.numateVersion = "0.3.0-SNAPSHOT"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    runtime "org.openrndr:openrndr-gl3:$openrndrVersion"
    runtime "org.openrndr:openrndr-gl3-natives-$openrndrOS:$openrndrVersion"
    compile "org.openrndr:openrndr-core:$openrndrVersion"
    compile "org.openrndr:openrndr-svg:$openrndrVersion"
    compile "org.openrndr:openrndr-animatable:$openrndrVersion"
    compile "org.openrndr:openrndr-extensions:$openrndrVersion"
    compile "org.openrndr:openrndr-filter:$openrndrVersion"
    compile "org.openrndr:openrndr-ffmpeg:$openrndrVersion"

    compile 'com.github.edwinrndr:openrndr-dnky:706e36f48f'
    compile 'com.github.edwinRNDR:numate:2afc3cf338'
    compile "com.github.openrndr.orx:orx-mesh-generators:v$orxVersion"
    compile "com.github.openrndr.orx:orx-noise:v$orxVersion"
    compile "com.github.openrndr.orx:orx-jumpflood:v$orxVersion"

// -- local versions
//    compile "org.openrndr.extra:orx-mesh-generators:$orxVersion"
//    compile "org.openrndr.extra:orx-jumpflood:$orxVersion"
//    compile "org.openrndr.extra:orx-noise:$orxVersion"
//    compile "org.openrndr.dnky:dnky:$dnkyVersion"
//    compile "org.openrndr.numate:numate:$numateVersion"

    // replace the following with functional slf4j library when using slf4j
    compile 'org.slf4j:slf4j-nop:1.7.25'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


mainClassName = "org.openrndr.dnky.demo.DNKYDemo001Kt"
if (!System.properties['os.name'].toLowerCase().contains('windows')) {
    applicationDefaultJvmArgs = ["-XstartOnFirstThread"]
}


ext.mainClassName = mainClassName
jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', '**/module-info*'
    archiveName 'myjar.jar'
}

